#Insert struts to protein model based on modified DSSP output

#Import required modules
import sys
from pymol import cmd
from pymol.cgo import*
  
#Refine and structurally support Secondary Structures
def sec_struts(alphas, betas):

    #Alpha Supports
    alpha_list = alphas
    
    #Parse list and change secondary structure designations
    print('Reassigning alpha helix atoms based on DSSP output...')
    count = 1
    for i in alpha_list:
        y=-1
        #iterate through sub-list to find length
        for j in i:
            y +=1
            
        #Use sub-list lengths to convert residues to alpha helix designation in pymol
        pymol.cmd.alter("resi"+str(i[0][1])+'-'+str(i[y][1])+"/", "ss='H'")
        cmd.sort()
        pymol.cmd.rebuild()
        
        #Use sub-list length to add struts to the given helix, strut default color is white.
        helix = [CYLINDER, i[0][2],i[0][3],i[0][4],i[y][2],i[y][3],i[y][4],0.8,1,1,1,1,1,1]
        strutName = 'helixStrut'+ str(count)
        pymol.cmd.load_cgo(helix, str(strutName))
        count +=1
        cmd.rebuild()
        
    #Reset view    
    cmd.reset()    
    print('Alpha helix reassignment and strut insertion completed.')
    
    #Beta supports
    print('Strutting beta sheets based on DSSP output...')
    beta_list = betas
    
    count = 1
    midResis = []
    for i in beta_list:
        #Find number of values in the sub-list
        x=len(i)
        
        #find midpoint of the sub-list, round to nearest whole number
        mid = round(x/2)
        midResis.append(i[mid])
       
        
        #Support each collection of beta strands
        beta = [CYLINDER,i[0][2],i[0][3],i[0][4],i[x-1][2],i[x-1][3],i[x-1][4],0.8,1,1,1,1,1,1]
        strutName = 'betaStrut'+str(count)
        cmd.load_cgo(beta, strutName)
        count+=1
        cmd.sort()
        cmd.rebuild()
        cmd.reset()
        
    #Connect mid-points of beta strand groupings
    listLength = len(midResis)
    nextMid = 1
    for j in midResis:
        if nextMid < listLength:
            midpoints = [CYLINDER, j[2],j[3],j[4],midResis[nextMid][2],midResis[nextMid][3],midResis[nextMid][4],0.8,1,1,1,1,1,1]
            strutName = 'midStrut'+str(nextMid)
            cmd.load_cgo(midpoints, strutName)
            nextMid+=1
            cmd.sort()
            cmd.rebuild()

        else:
            midpoints = [CYLINDER, j[2],j[3],j[4],midResis[0][2],midResis[0][3],midResis[0][4],0.8,1,1,1,1,1,1]
            strutName = 'midStrut'+str(nextMid)
            cmd.load_cgo(midpoints, strutName)
            cmd.sort()
            cmd.rebuild()

    cmd.reset()
    print("Beta strutting completed.")
    return
